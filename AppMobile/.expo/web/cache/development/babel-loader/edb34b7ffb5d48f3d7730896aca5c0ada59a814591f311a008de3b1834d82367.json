{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { CodedError } from '@unimodules/core';\nimport * as AppAuth from 'expo-app-auth';\nimport Constants from 'expo-constants';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar isInExpo = Constants.appOwnership === 'expo';\nfunction getPlatformGUID(config) {\n  var clientId = config.clientId;\n  var iosClientId = Constants.appOwnership === 'standalone' ? config.iosStandaloneAppClientId : config.iosClientId;\n  var androidClientId = isInExpo ? config.androidClientId : config.androidStandaloneAppClientId;\n  var platformClientId = Platform.select({\n    ios: iosClientId,\n    android: androidClientId,\n    default: config.clientId\n  }) || clientId;\n  if (typeof iosClientId === 'string' && typeof androidClientId === 'string' && iosClientId === androidClientId) {\n    throw new CodedError('ERR_GOOGLE_CONFIG', 'Keys for Android and iOS cannot be the same value. Ensure you are linking the client IDs matching the given platforms in the Google APIs console: https://console.developers.google.com/apis/credentials');\n  }\n  if (!platformClientId) {\n    throw new CodedError('ERR_GOOGLE_CONFIG', 'Please provide the appropriate client ID. See the documentation for more details https://docs.expo.io/versions/latest/sdk/google/#loginasync');\n  }\n  var guid = guidFromClientId(platformClientId);\n  return guid;\n}\nvar PROJECT_ID_LENGTH = 32;\nfunction isValidGUID(guid) {\n  var components = guid.split('-');\n  if (components.length !== 2) {\n    return {\n      isValid: false,\n      reason: \"`\" + guid + \"` must be a string of numbers and an alphanumeric string \" + PROJECT_ID_LENGTH + \" characters long, joined with a hyphen.\"\n    };\n  }\n  var projectNumber = components[0];\n  var projectId = components[1];\n  if (isNaN(+projectNumber)) {\n    var hashedProjectId = Array(PROJECT_ID_LENGTH).fill('x');\n    return {\n      isValid: false,\n      reason: \"`\" + projectNumber + \"-\" + hashedProjectId + \"` project number must be a string of numbers.\"\n    };\n  }\n  if (!projectId.match('^[a-zA-Z0-9]+$')) {\n    var hashedProjectNumber = Array(projectNumber.length).fill('x');\n    return {\n      isValid: false,\n      reason: \"`\" + hashedProjectNumber + \"-\" + projectId + \"` project ID must be an alphanumeric string \" + PROJECT_ID_LENGTH + \" characters long.\"\n    };\n  }\n  return {\n    isValid: true\n  };\n}\nfunction guidFromClientId(clientId) {\n  var clientIdComponents = clientId.split('.').filter(function (component) {\n    return component.includes('-');\n  });\n  var guid = clientIdComponents[0];\n  var _isValidGUID = isValidGUID(guid),\n    isValid = _isValidGUID.isValid,\n    reason = _isValidGUID.reason;\n  if (!isValid) {\n    throw new CodedError('ERR_GOOGLE_GUID', reason + ' Please ensure you copied the client ID correctly.');\n  }\n  return guid;\n}\nexport function logInAsync(config) {\n  var userDefinedScopes, requiredScopes, scopes, guid, clientId, redirectUrl, extras, logInResult, userInfoResponse, userInfo, message;\n  return _regeneratorRuntime.async(function logInAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (config.behavior !== undefined) {\n            console.warn(\"Deprecated: Native Google Sign-In has been moved to Expo.GoogleSignIn ('expo-google-sign-in') Falling back to `web` behavior. `behavior` deprecated in SDK 34\");\n          }\n          if (config.webClientId !== undefined) {\n            console.warn('Deprecated: You will need to use expo-google-sign-in to do server side authentication outside of the Expo client');\n          }\n          userDefinedScopes = config.scopes || [];\n          requiredScopes = [].concat(_toConsumableArray(userDefinedScopes), ['profile', 'email', 'openid']);\n          scopes = _toConsumableArray(new Set(requiredScopes));\n          guid = getPlatformGUID(config);\n          clientId = guid + \".apps.googleusercontent.com\";\n          redirectUrl = config.redirectUrl ? config.redirectUrl : AppAuth.OAuthRedirect + \":/oauth2redirect/google\";\n          extras = {};\n          if (config.language) {\n            extras.hl = config.language;\n          }\n          if (config.loginHint) {\n            extras.login_hint = config.loginHint;\n          }\n          _context.prev = 11;\n          _context.next = 14;\n          return _regeneratorRuntime.awrap(AppAuth.authAsync({\n            issuer: 'https://accounts.google.com',\n            scopes: scopes,\n            redirectUrl: redirectUrl,\n            clientId: clientId,\n            additionalParameters: extras\n          }));\n        case 14:\n          logInResult = _context.sent;\n          _context.next = 17;\n          return _regeneratorRuntime.awrap(fetch('https://www.googleapis.com/userinfo/v2/me', {\n            headers: {\n              Authorization: \"Bearer \" + logInResult.accessToken\n            }\n          }));\n        case 17:\n          userInfoResponse = _context.sent;\n          _context.next = 20;\n          return _regeneratorRuntime.awrap(userInfoResponse.json());\n        case 20:\n          userInfo = _context.sent;\n          return _context.abrupt(\"return\", {\n            type: 'success',\n            accessToken: logInResult.accessToken,\n            idToken: logInResult.idToken,\n            refreshToken: logInResult.refreshToken,\n            user: {\n              id: userInfo.id,\n              name: userInfo.name,\n              givenName: userInfo.given_name,\n              familyName: userInfo.family_name,\n              photoUrl: userInfo.picture,\n              email: userInfo.email\n            }\n          });\n        case 24:\n          _context.prev = 24;\n          _context.t0 = _context[\"catch\"](11);\n          message = _context.t0.message.toLowerCase();\n          if (!(message.includes('user cancelled') || message.includes('error -3'))) {\n            _context.next = 29;\n            break;\n          }\n          return _context.abrupt(\"return\", {\n            type: 'cancel'\n          });\n        case 29:\n          throw _context.t0;\n        case 30:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[11, 24]], Promise);\n}\nexport function logOutAsync(_ref) {\n  var accessToken, inputConfig, guid, clientId, config;\n  return _regeneratorRuntime.async(function logOutAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          accessToken = _ref.accessToken, inputConfig = _objectWithoutProperties(_ref, [\"accessToken\"]);\n          guid = getPlatformGUID(inputConfig);\n          clientId = guid + \".apps.googleusercontent.com\";\n          config = {\n            issuer: 'https://accounts.google.com',\n            clientId: clientId\n          };\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(AppAuth.revokeAsync(config, {\n            token: accessToken,\n            isClientIdProvided: !!clientId\n          }));\n        case 6:\n          return _context2.abrupt(\"return\", _context2.sent);\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"names":["CodedError","AppAuth","Constants","Platform","isInExpo","appOwnership","getPlatformGUID","config","clientId","iosClientId","iosStandaloneAppClientId","androidClientId","androidStandaloneAppClientId","platformClientId","select","ios","android","default","guid","guidFromClientId","PROJECT_ID_LENGTH","isValidGUID","components","split","length","isValid","reason","projectNumber","projectId","isNaN","hashedProjectId","Array","fill","match","hashedProjectNumber","clientIdComponents","filter","component","includes","_isValidGUID","logInAsync","userDefinedScopes","requiredScopes","scopes","redirectUrl","extras","logInResult","userInfoResponse","userInfo","message","_regeneratorRuntime","async","logInAsync$","_context","prev","next","behavior","undefined","console","warn","webClientId","concat","_toConsumableArray","Set","OAuthRedirect","language","hl","loginHint","login_hint","awrap","authAsync","issuer","additionalParameters","sent","fetch","headers","Authorization","accessToken","json","abrupt","type","idToken","refreshToken","user","id","name","givenName","given_name","familyName","family_name","photoUrl","picture","email","t0","toLowerCase","stop","Promise","logOutAsync","_ref","inputConfig","logOutAsync$","_context2","_objectWithoutProperties","revokeAsync","token","isClientIdProvided"],"sources":["D:\\Videos\\Proyectos hechos\\1C2021 - AppSupermercado - Ferrario_Matias-20230303T213100Z-001\\1C2021 - AppSupermercado - Ferrario_Matias\\Codigo\\AppMobile\\node_modules\\expo-google-app-auth\\src\\Google.ts"],"sourcesContent":["import { CodedError } from '@unimodules/core';\nimport * as AppAuth from 'expo-app-auth';\nimport Constants from 'expo-constants';\nimport { Platform } from 'react-native';\n\nconst isInExpo = Constants.appOwnership === 'expo';\nexport type GoogleLogInConfig = {\n  /**\n   * Used in the Expo Play Store client app on Android (development only).\n   *\n   * - Create an Android OAuth Client ID from the [Credentials Page](https://console.developers.google.com/apis/credentials).\n   * - Run `openssl rand -base64 32 | openssl sha1 -c` in your terminal, it will output a string that looks like A1:B2:C3 but longer.\n   * - Paste the output from the previous step into the \"Signing-certificate fingerprint\" text field.\n   * - Use `host.exp.exponent` as the \"Package name\".\n   */\n  androidClientId?: string;\n  /**\n   * Used in the Expo App Store client app on iOS (development only).\n   *\n   * - Select \"iOS Application\" as the Application Type from the [Credentials Page](https://console.developers.google.com/apis/credentials).\n   * - Use `host.exp.exponent` as the bundle identifier.\n   */\n  iosClientId?: string;\n  /**\n   * Used in your custom Android app (production).\n   * Visit the docs page [Deploying to a standalone app on Android](https://docs.expo.io/versions/latest/sdk/google/#deploying-to-a-standalone-app-on-android) for more info.\n   */\n  androidStandaloneAppClientId?: string;\n  /**\n   * Used in your custom iOS app (production).\n   * Visit the docs page [Deploying to a standalone app on iOS](https://docs.expo.io/versions/latest/sdk/google/#deploying-to-a-standalone-app-on-ios) for more info.\n   */\n  iosStandaloneAppClientId?: string;\n  /**\n   * **Deprecated:** [learn more here](https://docs.expo.io/versions/latest/sdk/google/#server-side-apis).\n   */\n  webClientId?: string;\n  /**\n   * System authentication is very different from web auth.\n   * All system functionality has been moved to expo-google-sign-in\n   */\n  behavior?: 'system' | 'web';\n  scopes?: string[];\n  /**\n   * Optionally you can define your own redirect URL.\n   * If this isn't defined then it will be infered from the correct client ID.\n   */\n  redirectUrl?: string;\n  /**\n   * Language for the sign in UI, in the form of ISO 639-1 language code optionally followed by a dash\n   * and ISO 3166-1 alpha-2 region code, such as 'it' or 'pt-PT'.\n   * Only set this value if it's different from the system default (which you can access via expo-localization).\n   */\n  language?: string;\n  /**\n   * If the user's email address is known ahead of time, it can be supplied to be the default option.\n   * If the user has approved access for this app in the past then auth may return without any further interaction.\n   */\n  loginHint?: string;\n  /**\n   * If no other client IDs are defined this will be used.\n   */\n  clientId?: string;\n};\n\nexport type GoogleUser = {\n  id?: string;\n  name?: string;\n  givenName?: string;\n  familyName?: string;\n  photoUrl?: string;\n  email?: string;\n};\n\nexport type LogInResult =\n  | {\n      type: 'cancel';\n    }\n  | {\n      type: 'success';\n      accessToken: string | null;\n      idToken: string | null;\n      refreshToken: string | null;\n      user: GoogleUser;\n    };\n\nfunction getPlatformGUID(config: GoogleLogInConfig) {\n  const { clientId } = config;\n\n  const iosClientId =\n    Constants.appOwnership === 'standalone' ? config.iosStandaloneAppClientId : config.iosClientId;\n  const androidClientId = isInExpo ? config.androidClientId : config.androidStandaloneAppClientId;\n\n  const platformClientId =\n    Platform.select({\n      ios: iosClientId,\n      android: androidClientId,\n      default: config.clientId,\n    }) || clientId;\n\n  if (\n    typeof iosClientId === 'string' &&\n    typeof androidClientId === 'string' &&\n    iosClientId === androidClientId\n  ) {\n    throw new CodedError(\n      'ERR_GOOGLE_CONFIG',\n      'Keys for Android and iOS cannot be the same value. Ensure you are linking the client IDs matching the given platforms in the Google APIs console: https://console.developers.google.com/apis/credentials'\n    );\n  }\n\n  if (!platformClientId) {\n    throw new CodedError(\n      'ERR_GOOGLE_CONFIG',\n      'Please provide the appropriate client ID. See the documentation for more details https://docs.expo.io/versions/latest/sdk/google/#loginasync'\n    );\n  }\n\n  const guid = guidFromClientId(platformClientId);\n  return guid;\n}\n\nconst PROJECT_ID_LENGTH = 32;\n\nfunction isValidGUID(guid: string) {\n  const components = guid.split('-');\n  if (components.length !== 2) {\n    return {\n      isValid: false,\n      reason: `\\`${guid}\\` must be a string of numbers and an alphanumeric string ${PROJECT_ID_LENGTH} characters long, joined with a hyphen.`,\n    };\n  }\n  const projectNumber = components[0];\n  const projectId = components[1];\n  if (isNaN(+projectNumber)) {\n    const hashedProjectId = Array(PROJECT_ID_LENGTH).fill('x');\n    return {\n      isValid: false,\n      reason: `\\`${projectNumber}-${hashedProjectId}\\` project number must be a string of numbers.`,\n    };\n  }\n  if (!projectId.match('^[a-zA-Z0-9]+$')) {\n    const hashedProjectNumber = Array(projectNumber.length).fill('x');\n    return {\n      isValid: false,\n      reason: `\\`${hashedProjectNumber}-${projectId}\\` project ID must be an alphanumeric string ${PROJECT_ID_LENGTH} characters long.`,\n    };\n  }\n\n  return { isValid: true };\n}\n\nfunction guidFromClientId(clientId: string): string {\n  const clientIdComponents = clientId.split('.').filter(component => component.includes('-'));\n\n  const guid = clientIdComponents[0];\n  const { isValid, reason } = isValidGUID(guid);\n  if (!isValid) {\n    throw new CodedError(\n      'ERR_GOOGLE_GUID',\n      reason + ' Please ensure you copied the client ID correctly.'\n    );\n  }\n\n  return guid;\n}\n\n/**\n * Prompts the user to log into Google and grants your app permission to access some of their Google data, as specified by the scopes.\n *\n * Get started in:\n * - [**Expo Client**](https://docs.expo.io/versions/latest/sdk/google/#using-it-inside-of-the-expo-app)\n * - [**Standalone**](https://docs.expo.io/versions/latest/sdk/google/#deploying-to-a-standalone-app-on-ios)\n *\n * @param config\n */\nexport async function logInAsync(config: GoogleLogInConfig): Promise<LogInResult> {\n  if (config.behavior !== undefined) {\n    console.warn(\n      \"Deprecated: Native Google Sign-In has been moved to Expo.GoogleSignIn ('expo-google-sign-in') Falling back to `web` behavior. `behavior` deprecated in SDK 34\"\n    );\n  }\n\n  if (config.webClientId !== undefined) {\n    console.warn(\n      'Deprecated: You will need to use expo-google-sign-in to do server side authentication outside of the Expo client'\n    );\n  }\n\n  const userDefinedScopes = config.scopes || [];\n  /* Add the required scopes for returning profile data. */\n  const requiredScopes = [...userDefinedScopes, 'profile', 'email', 'openid'];\n  /* Remove duplicates */\n  const scopes = [...new Set(requiredScopes)];\n\n  const guid = getPlatformGUID(config);\n\n  const clientId = `${guid}.apps.googleusercontent.com`;\n  const redirectUrl = config.redirectUrl\n    ? config.redirectUrl\n    : `${AppAuth.OAuthRedirect}:/oauth2redirect/google`;\n\n  const extras: Record<string, string> = {};\n  if (config.language) {\n    // The OpenID property `ui_locales` doesn't seem to work as expected,\n    // but `hl` will work to change the UI language.\n    // Reference: https://github.com/googleapis/google-api-nodejs-client/blob/9d0dd2b6fa03c5e32efb0e39daac6291ebad2c3d/src/apis/customsearch/v1.ts#L230\n    extras.hl = config.language;\n  }\n  if (config.loginHint) {\n    // Reference https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\n    extras.login_hint = config.loginHint;\n  }\n\n  try {\n    const logInResult = await AppAuth.authAsync({\n      issuer: 'https://accounts.google.com',\n      scopes,\n      redirectUrl,\n      clientId,\n      additionalParameters: extras,\n    });\n\n    // Web login only returns an accessToken so use it to fetch the same info as the native login\n    // does.\n    const userInfoResponse = await fetch('https://www.googleapis.com/userinfo/v2/me', {\n      headers: { Authorization: `Bearer ${logInResult.accessToken}` },\n    });\n    const userInfo = await userInfoResponse.json();\n\n    return {\n      type: 'success',\n      accessToken: logInResult.accessToken,\n      idToken: logInResult.idToken,\n      refreshToken: logInResult.refreshToken,\n      user: {\n        id: userInfo.id,\n        name: userInfo.name,\n        givenName: userInfo.given_name,\n        familyName: userInfo.family_name,\n        photoUrl: userInfo.picture,\n        email: userInfo.email,\n      },\n    };\n  } catch (error) {\n    const message = (error.message as string).toLowerCase();\n    // Error code -3 is the native error code for user cancel on iOS\n    if (message.includes('user cancelled') || message.includes('error -3')) {\n      return { type: 'cancel' };\n    }\n    throw error;\n  }\n}\n\nexport async function logOutAsync({\n  accessToken,\n  ...inputConfig\n}: GoogleLogInConfig & { accessToken: string }): Promise<any> {\n  const guid = getPlatformGUID(inputConfig);\n\n  const clientId = `${guid}.apps.googleusercontent.com`;\n\n  const config = {\n    issuer: 'https://accounts.google.com',\n    clientId,\n  };\n\n  return await AppAuth.revokeAsync(config, {\n    token: accessToken,\n    isClientIdProvided: !!clientId,\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}