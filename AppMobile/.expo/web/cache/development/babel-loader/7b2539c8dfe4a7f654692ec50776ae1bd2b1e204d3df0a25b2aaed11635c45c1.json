{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport { ScreenContainer } from 'react-native-screens';\nimport { NavigationHelpersContext, NavigationContext, NavigationRouteContext, DrawerActions, useTheme } from '@react-navigation/native';\nimport { GestureHandlerRootView } from \"./GestureHandler\";\nimport SafeAreaProviderCompat from \"./SafeAreaProviderCompat\";\nimport ResourceSavingScene from \"./ResourceSavingScene\";\nimport Header from \"./Header\";\nimport DrawerContent from \"./DrawerContent\";\nimport Drawer from \"./Drawer\";\nimport DrawerOpenContext from \"../utils/DrawerOpenContext\";\nimport DrawerPositionContext from \"../utils/DrawerPositionContext\";\nimport useWindowDimensions from \"../utils/useWindowDimensions\";\nimport getIsDrawerOpenFromState from \"../utils/getIsDrawerOpenFromState\";\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n    width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\nvar GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\nexport default function DrawerView(_ref2) {\n  var state = _ref2.state,\n    navigation = _ref2.navigation,\n    descriptors = _ref2.descriptors,\n    _ref2$lazy = _ref2.lazy,\n    lazy = _ref2$lazy === void 0 ? true : _ref2$lazy,\n    _ref2$drawerContent = _ref2.drawerContent,\n    drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n      return React.createElement(DrawerContent, props);\n    } : _ref2$drawerContent,\n    _ref2$drawerPosition = _ref2.drawerPosition,\n    drawerPosition = _ref2$drawerPosition === void 0 ? I18nManager.isRTL ? 'right' : 'left' : _ref2$drawerPosition,\n    _ref2$keyboardDismiss = _ref2.keyboardDismissMode,\n    keyboardDismissMode = _ref2$keyboardDismiss === void 0 ? 'on-drag' : _ref2$keyboardDismiss,\n    _ref2$overlayColor = _ref2.overlayColor,\n    overlayColor = _ref2$overlayColor === void 0 ? 'rgba(0, 0, 0, 0.5)' : _ref2$overlayColor,\n    _ref2$drawerType = _ref2.drawerType,\n    drawerType = _ref2$drawerType === void 0 ? 'front' : _ref2$drawerType,\n    _ref2$hideStatusBar = _ref2.hideStatusBar,\n    hideStatusBar = _ref2$hideStatusBar === void 0 ? false : _ref2$hideStatusBar,\n    _ref2$statusBarAnimat = _ref2.statusBarAnimation,\n    statusBarAnimation = _ref2$statusBarAnimat === void 0 ? 'slide' : _ref2$statusBarAnimat,\n    drawerContentOptions = _ref2.drawerContentOptions,\n    drawerStyle = _ref2.drawerStyle,\n    edgeWidth = _ref2.edgeWidth,\n    gestureHandlerProps = _ref2.gestureHandlerProps,\n    minSwipeDistance = _ref2.minSwipeDistance,\n    sceneContainerStyle = _ref2.sceneContainerStyle,\n    _ref2$detachInactiveS = _ref2.detachInactiveScreens,\n    detachInactiveScreens = _ref2$detachInactiveS === void 0 ? true : _ref2$detachInactiveS;\n  var _React$useState = React.useState([state.routes[state.index].key]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    loaded = _React$useState2[0],\n    setLoaded = _React$useState2[1];\n  var dimensions = useWindowDimensions();\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var isDrawerOpen = getIsDrawerOpenFromState(state);\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.openDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.closeDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (isDrawerOpen) {\n      navigation.emit({\n        type: 'drawerOpen'\n      });\n    } else {\n      navigation.emit({\n        type: 'drawerClose'\n      });\n    }\n  }, [isDrawerOpen, navigation]);\n  React.useEffect(function () {\n    var subscription;\n    if (isDrawerOpen) {\n      subscription = BackHandler.addEventListener('hardwareBackPress', function () {\n        handleDrawerClose();\n        return true;\n      });\n    }\n    return function () {\n      var _subscription;\n      return (_subscription = subscription) === null || _subscription === void 0 ? void 0 : _subscription.remove();\n    };\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n  var focusedRouteKey = state.routes[state.index].key;\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat(_toConsumableArray(loaded), [focusedRouteKey]));\n  }\n  var renderNavigationView = function renderNavigationView(_ref3) {\n    var progress = _ref3.progress;\n    return React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition\n    }, drawerContent(_objectSpread(_objectSpread({}, drawerContentOptions), {}, {\n      progress: progress,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    })));\n  };\n  var renderContent = function renderContent() {\n    return React.createElement(ScreenContainer, {\n      enabled: detachInactiveScreens,\n      style: styles.content\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var unmountOnBlur = descriptor.options.unmountOnBlur;\n      var isFocused = state.index === index;\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        return null;\n      }\n      var _descriptor$options = descriptor.options,\n        _descriptor$options$h = _descriptor$options.header,\n        header = _descriptor$options$h === void 0 ? function (props) {\n          return React.createElement(Header, props);\n        } : _descriptor$options$h,\n        _descriptor$options$h2 = _descriptor$options.headerShown,\n        headerShown = _descriptor$options$h2 === void 0 ? true : _descriptor$options$h2;\n      return React.createElement(ResourceSavingScene, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          opacity: isFocused ? 1 : 0\n        }],\n        isVisible: isFocused,\n        enabled: detachInactiveScreens\n      }, headerShown ? React.createElement(NavigationContext.Provider, {\n        value: descriptor.navigation\n      }, React.createElement(NavigationRouteContext.Provider, {\n        value: route\n      }, header({\n        layout: dimensions,\n        scene: {\n          route: route,\n          descriptor: descriptor\n        }\n      }))) : null, descriptor.render());\n    }));\n  };\n  var activeKey = state.routes[state.index].key;\n  var _descriptors$activeKe = descriptors[activeKey].options,\n    gestureEnabled = _descriptors$activeKe.gestureEnabled,\n    swipeEnabled = _descriptors$activeKe.swipeEnabled;\n  return React.createElement(NavigationHelpersContext.Provider, {\n    value: navigation\n  }, React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(SafeAreaProviderCompat, null, React.createElement(DrawerOpenContext.Provider, {\n    value: isDrawerOpen\n  }, React.createElement(Drawer, {\n    open: isDrawerOpen,\n    gestureEnabled: gestureEnabled,\n    swipeEnabled: swipeEnabled,\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle],\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    swipeEdgeWidth: edgeWidth,\n    swipeDistanceThreshold: minSwipeDistance,\n    hideStatusBar: hideStatusBar,\n    statusBarAnimation: statusBarAnimation,\n    renderDrawerContent: renderNavigationView,\n    renderSceneContent: renderContent,\n    keyboardDismissMode: keyboardDismissMode,\n    dimensions: dimensions\n  })))));\n}\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","View","StyleSheet","I18nManager","Platform","BackHandler","ScreenContainer","NavigationHelpersContext","NavigationContext","NavigationRouteContext","DrawerActions","useTheme","GestureHandlerRootView","SafeAreaProviderCompat","ResourceSavingScene","Header","DrawerContent","Drawer","DrawerOpenContext","DrawerPositionContext","useWindowDimensions","getIsDrawerOpenFromState","getDefaultDrawerWidth","_ref","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","OS","maxWidth","GestureHandlerWrapper","DrawerView","_ref2","state","navigation","descriptors","_ref2$lazy","lazy","_ref2$drawerContent","drawerContent","props","createElement","_ref2$drawerPosition","drawerPosition","isRTL","_ref2$keyboardDismiss","keyboardDismissMode","_ref2$overlayColor","overlayColor","_ref2$drawerType","drawerType","_ref2$hideStatusBar","hideStatusBar","_ref2$statusBarAnimat","statusBarAnimation","drawerContentOptions","drawerStyle","edgeWidth","gestureHandlerProps","minSwipeDistance","sceneContainerStyle","_ref2$detachInactiveS","detachInactiveScreens","_React$useState","useState","routes","index","key","_React$useState2","_slicedToArray","loaded","setLoaded","dimensions","_useTheme","colors","isDrawerOpen","handleDrawerOpen","useCallback","dispatch","_objectSpread","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","emit","type","subscription","addEventListener","_subscription","remove","focusedRouteKey","includes","concat","_toConsumableArray","renderNavigationView","_ref3","progress","Provider","value","renderContent","enabled","style","styles","content","map","route","descriptor","unmountOnBlur","options","isFocused","_descriptor$options","_descriptor$options$h","header","_descriptor$options$h2","headerShown","absoluteFill","opacity","isVisible","layout","scene","render","activeKey","_descriptors$activeKe","gestureEnabled","swipeEnabled","open","onOpen","onClose","backgroundColor","background","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","overlayStyle","swipeEdgeWidth","swipeDistanceThreshold","renderDrawerContent","renderSceneContent","create","flex"],"sources":["D:\\Videos\\Proyectos hechos\\1C2021 - AppSupermercado - Ferrario_Matias-20230303T213100Z-001\\1C2021 - AppSupermercado - Ferrario_Matias\\Codigo\\AppMobile\\node_modules\\@react-navigation\\drawer\\lib\\module\\views\\DrawerView.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  BackHandler,\n  NativeEventSubscription,\n} from 'react-native';\nimport { ScreenContainer } from 'react-native-screens';\nimport {\n  NavigationHelpersContext,\n  NavigationContext,\n  NavigationRouteContext,\n  DrawerNavigationState,\n  DrawerActions,\n  useTheme,\n  ParamListBase,\n} from '@react-navigation/native';\n\nimport { GestureHandlerRootView } from './GestureHandler';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport Header from './Header';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport DrawerOpenContext from '../utils/DrawerOpenContext';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport useWindowDimensions from '../utils/useWindowDimensions';\nimport getIsDrawerOpenFromState from '../utils/getIsDrawerOpenFromState';\nimport type {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n  DrawerHeaderProps,\n} from '../types';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n  detachInactiveScreens = true,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.routes[state.index].key]);\n  const dimensions = useWindowDimensions();\n\n  const { colors } = useTheme();\n\n  const isDrawerOpen = getIsDrawerOpenFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (isDrawerOpen) {\n      navigation.emit({ type: 'drawerOpen' });\n    } else {\n      navigation.emit({ type: 'drawerClose' });\n    }\n  }, [isDrawerOpen, navigation]);\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (isDrawerOpen) {\n      // We only add the subscription when drawer opens\n      // This way we can make sure that the subscription is added as late as possible\n      // This will make sure that our handler will run first when back button is pressed\n      subscription = BackHandler.addEventListener('hardwareBackPress', () => {\n        handleDrawerClose();\n\n        return true;\n      });\n    }\n\n    return () => subscription?.remove();\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n\n  const focusedRouteKey = state.routes[state.index].key;\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          ...drawerContentOptions,\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderContent = () => {\n    return (\n      // @ts-ignore\n      <ScreenContainer enabled={detachInactiveScreens} style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = (props: DrawerHeaderProps) => <Header {...props} />,\n            headerShown = true,\n          } = descriptor.options;\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n              enabled={detachInactiveScreens}\n            >\n              {headerShown ? (\n                <NavigationContext.Provider value={descriptor.navigation}>\n                  <NavigationRouteContext.Provider value={route}>\n                    {header({\n                      layout: dimensions,\n                      scene: { route, descriptor },\n                    })}\n                  </NavigationRouteContext.Provider>\n                </NavigationContext.Provider>\n              ) : null}\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled, swipeEnabled } = descriptors[activeKey].options;\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <GestureHandlerWrapper style={styles.content}>\n        <SafeAreaProviderCompat>\n          <DrawerOpenContext.Provider value={isDrawerOpen}>\n            <Drawer\n              open={isDrawerOpen}\n              gestureEnabled={gestureEnabled}\n              swipeEnabled={swipeEnabled}\n              onOpen={handleDrawerOpen}\n              onClose={handleDrawerClose}\n              gestureHandlerProps={gestureHandlerProps}\n              drawerType={drawerType}\n              drawerPosition={drawerPosition}\n              sceneContainerStyle={[\n                { backgroundColor: colors.background },\n                sceneContainerStyle,\n              ]}\n              drawerStyle={[\n                {\n                  width: getDefaultDrawerWidth(dimensions),\n                  backgroundColor: colors.card,\n                },\n                drawerType === 'permanent' &&\n                  (drawerPosition === 'left'\n                    ? {\n                        borderRightColor: colors.border,\n                        borderRightWidth: StyleSheet.hairlineWidth,\n                      }\n                    : {\n                        borderLeftColor: colors.border,\n                        borderLeftWidth: StyleSheet.hairlineWidth,\n                      }),\n                drawerStyle,\n              ]}\n              overlayStyle={{ backgroundColor: overlayColor }}\n              swipeEdgeWidth={edgeWidth}\n              swipeDistanceThreshold={minSwipeDistance}\n              hideStatusBar={hideStatusBar}\n              statusBarAnimation={statusBarAnimation}\n              renderDrawerContent={renderNavigationView}\n              renderSceneContent={renderContent}\n              keyboardDismissMode={keyboardDismissMode}\n              dimensions={dimensions}\n            />\n          </DrawerOpenContext.Provider>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}