{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { CodedError, UnavailabilityError } from '@unimodules/core';\nimport invariant from 'invariant';\nimport ExpoAppAuth from \"./ExpoAppAuth\";\nexport * from \"./AppAuth.types\";\nfunction isValidServiceConfiguration(config) {\n  return !!(config && typeof config.authorizationEndpoint === 'string' && typeof config.tokenEndpoint === 'string');\n}\nfunction assertValidClientId(clientId) {\n  if (typeof clientId !== 'string' || !clientId.length) {\n    throw new CodedError('ERR_APP_AUTH_INVALID_CONFIG', '`clientId` must be a string with more than 0 characters');\n  }\n}\nfunction assertValidProps(_ref) {\n  var issuer = _ref.issuer,\n    redirectUrl = _ref.redirectUrl,\n    clientId = _ref.clientId,\n    serviceConfiguration = _ref.serviceConfiguration;\n  if (typeof issuer !== 'string' && !isValidServiceConfiguration(serviceConfiguration)) {\n    throw new CodedError('ERR_APP_AUTH_INVALID_CONFIG', 'You must provide either an `issuer` or both `authorizationEndpoint` and `tokenEndpoint`');\n  }\n  if (typeof redirectUrl !== 'string') {\n    throw new CodedError('ERR_APP_AUTH_INVALID_CONFIG', '`redirectUrl` must be a string');\n  }\n  assertValidClientId(clientId);\n}\nfunction _executeAsync(props) {\n  return _regeneratorRuntime.async(function _executeAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!props.redirectUrl) {\n            props.redirectUrl = getDefaultOAuthRedirect();\n          }\n          assertValidProps(props);\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(ExpoAppAuth.executeAsync(props));\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getDefaultOAuthRedirect() {\n  return ExpoAppAuth.OAuthRedirect + \":/oauthredirect\";\n}\nexport function authAsync(props) {\n  return _regeneratorRuntime.async(function authAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExpoAppAuth.executeAsync) {\n            _context2.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('expo-app-auth', 'authAsync');\n        case 2:\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(_executeAsync(props));\n        case 4:\n          return _context2.abrupt(\"return\", _context2.sent);\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function refreshAsync(props, refreshToken) {\n  return _regeneratorRuntime.async(function refreshAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (ExpoAppAuth.executeAsync) {\n            _context3.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('expo-app-auth', 'refreshAsync');\n        case 2:\n          if (refreshToken) {\n            _context3.next = 4;\n            break;\n          }\n          throw new CodedError('ERR_APP_AUTH_TOKEN', 'Cannot refresh with null `refreshToken`');\n        case 4:\n          _context3.next = 6;\n          return _regeneratorRuntime.awrap(_executeAsync(_objectSpread({\n            isRefresh: true,\n            refreshToken: refreshToken\n          }, props)));\n        case 6:\n          return _context3.abrupt(\"return\", _context3.sent);\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function revokeAsync(_ref2, _ref3) {\n  var clientId, issuer, serviceConfiguration, token, _ref3$isClientIdProvi, isClientIdProvided, revocationEndpoint, response, openidConfig, encodedClientID, encodedToken, body, headers, results;\n  return _regeneratorRuntime.async(function revokeAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          clientId = _ref2.clientId, issuer = _ref2.issuer, serviceConfiguration = _ref2.serviceConfiguration;\n          token = _ref3.token, _ref3$isClientIdProvi = _ref3.isClientIdProvided, isClientIdProvided = _ref3$isClientIdProvi === void 0 ? false : _ref3$isClientIdProvi;\n          if (token) {\n            _context4.next = 4;\n            break;\n          }\n          throw new CodedError('ERR_APP_AUTH_TOKEN', 'Cannot revoke a null `token`');\n        case 4:\n          assertValidClientId(clientId);\n          if (!(serviceConfiguration && serviceConfiguration.revocationEndpoint)) {\n            _context4.next = 9;\n            break;\n          }\n          revocationEndpoint = serviceConfiguration.revocationEndpoint;\n          _context4.next = 17;\n          break;\n        case 9:\n          _context4.next = 11;\n          return _regeneratorRuntime.awrap(fetch(issuer + \"/.well-known/openid-configuration\"));\n        case 11:\n          response = _context4.sent;\n          _context4.next = 14;\n          return _regeneratorRuntime.awrap(response.json());\n        case 14:\n          openidConfig = _context4.sent;\n          invariant(openidConfig.revocation_endpoint, 'The OpenID config does not specify a revocation endpoint');\n          revocationEndpoint = openidConfig.revocation_endpoint;\n        case 17:\n          encodedClientID = encodeURIComponent(clientId);\n          encodedToken = encodeURIComponent(token);\n          body = \"token=\" + encodedToken + (isClientIdProvided ? \"&client_id=\" + encodedClientID : '');\n          headers = {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          };\n          _context4.prev = 21;\n          _context4.next = 24;\n          return _regeneratorRuntime.awrap(fetch(revocationEndpoint, {\n            method: 'POST',\n            headers: headers,\n            body: body\n          }));\n        case 24:\n          results = _context4.sent;\n          return _context4.abrupt(\"return\", results);\n        case 28:\n          _context4.prev = 28;\n          _context4.t0 = _context4[\"catch\"](21);\n          throw new CodedError('ERR_APP_AUTH_REVOKE_FAILED', _context4.t0.message);\n        case 31:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[21, 28]], Promise);\n}\nvar OAuthRedirect = ExpoAppAuth.OAuthRedirect,\n  URLSchemes = ExpoAppAuth.URLSchemes;\nexport { OAuthRedirect, URLSchemes };","map":{"version":3,"names":["CodedError","UnavailabilityError","invariant","ExpoAppAuth","isValidServiceConfiguration","config","authorizationEndpoint","tokenEndpoint","assertValidClientId","clientId","length","assertValidProps","_ref","issuer","redirectUrl","serviceConfiguration","_executeAsync","props","_regeneratorRuntime","async","_executeAsync$","_context","prev","next","getDefaultOAuthRedirect","awrap","executeAsync","abrupt","sent","stop","Promise","OAuthRedirect","authAsync","authAsync$","_context2","refreshAsync","refreshToken","refreshAsync$","_context3","_objectSpread","isRefresh","revokeAsync","_ref2","_ref3","token","_ref3$isClientIdProvi","isClientIdProvided","revocationEndpoint","response","openidConfig","encodedClientID","encodedToken","body","headers","results","revokeAsync$","_context4","fetch","json","revocation_endpoint","encodeURIComponent","method","t0","message","URLSchemes"],"sources":["D:\\Videos\\Proyectos hechos\\1C2021 - AppSupermercado - Ferrario_Matias-20230303T213100Z-001\\1C2021 - AppSupermercado - Ferrario_Matias\\Codigo\\AppMobile\\node_modules\\expo-app-auth\\src\\AppAuth.ts"],"sourcesContent":["import { CodedError, UnavailabilityError } from '@unimodules/core';\nimport invariant from 'invariant';\n\nimport {\n  OAuthBaseProps,\n  OAuthProps,\n  OAuthRevokeOptions,\n  OAuthServiceConfiguration,\n  TokenResponse,\n} from './AppAuth.types';\nimport ExpoAppAuth from './ExpoAppAuth';\n\nexport * from './AppAuth.types';\n\nfunction isValidServiceConfiguration(config?: OAuthServiceConfiguration): boolean {\n  return !!(\n    config &&\n    typeof config.authorizationEndpoint === 'string' &&\n    typeof config.tokenEndpoint === 'string'\n  );\n}\n\nfunction assertValidClientId(clientId?: string): void {\n  if (typeof clientId !== 'string' || !clientId.length) {\n    throw new CodedError(\n      'ERR_APP_AUTH_INVALID_CONFIG',\n      '`clientId` must be a string with more than 0 characters'\n    );\n  }\n}\n\nfunction assertValidProps({\n  issuer,\n  redirectUrl,\n  clientId,\n  serviceConfiguration,\n}: OAuthProps): void {\n  if (typeof issuer !== 'string' && !isValidServiceConfiguration(serviceConfiguration)) {\n    throw new CodedError(\n      'ERR_APP_AUTH_INVALID_CONFIG',\n      'You must provide either an `issuer` or both `authorizationEndpoint` and `tokenEndpoint`'\n    );\n  }\n  if (typeof redirectUrl !== 'string') {\n    throw new CodedError('ERR_APP_AUTH_INVALID_CONFIG', '`redirectUrl` must be a string');\n  }\n  assertValidClientId(clientId);\n}\n\nasync function _executeAsync(props: OAuthProps): Promise<TokenResponse> {\n  if (!props.redirectUrl) {\n    props.redirectUrl = getDefaultOAuthRedirect();\n  }\n  assertValidProps(props);\n  return await ExpoAppAuth.executeAsync(props);\n}\n\nexport function getDefaultOAuthRedirect(): string {\n  return `${ExpoAppAuth.OAuthRedirect}:/oauthredirect`;\n}\n\nexport async function authAsync(props: OAuthProps): Promise<TokenResponse> {\n  if (!ExpoAppAuth.executeAsync) {\n    throw new UnavailabilityError('expo-app-auth', 'authAsync');\n  }\n  return await _executeAsync(props);\n}\n\nexport async function refreshAsync(\n  props: OAuthProps,\n  refreshToken: string\n): Promise<TokenResponse> {\n  if (!ExpoAppAuth.executeAsync) {\n    throw new UnavailabilityError('expo-app-auth', 'refreshAsync');\n  }\n  if (!refreshToken) {\n    throw new CodedError('ERR_APP_AUTH_TOKEN', 'Cannot refresh with null `refreshToken`');\n  }\n  return await _executeAsync({\n    isRefresh: true,\n    refreshToken,\n    ...props,\n  });\n}\n\n/* JS Method */\nexport async function revokeAsync(\n  { clientId, issuer, serviceConfiguration }: OAuthBaseProps,\n  { token, isClientIdProvided = false }: OAuthRevokeOptions\n): Promise<any> {\n  if (!token) {\n    throw new CodedError('ERR_APP_AUTH_TOKEN', 'Cannot revoke a null `token`');\n  }\n\n  assertValidClientId(clientId);\n\n  let revocationEndpoint;\n  if (serviceConfiguration && serviceConfiguration.revocationEndpoint) {\n    revocationEndpoint = serviceConfiguration.revocationEndpoint;\n  } else {\n    // For Open IDC providers only.\n    const response = await fetch(`${issuer}/.well-known/openid-configuration`);\n    const openidConfig = await response.json();\n\n    invariant(\n      openidConfig.revocation_endpoint,\n      'The OpenID config does not specify a revocation endpoint'\n    );\n\n    revocationEndpoint = openidConfig.revocation_endpoint;\n  }\n\n  const encodedClientID = encodeURIComponent(clientId);\n  const encodedToken = encodeURIComponent(token);\n  const body = `token=${encodedToken}${isClientIdProvided ? `&client_id=${encodedClientID}` : ''}`;\n  const headers = { 'Content-Type': 'application/x-www-form-urlencoded' };\n  try {\n    // https://tools.ietf.org/html/rfc7009#section-2.2\n    const results = await fetch(revocationEndpoint, {\n      method: 'POST',\n      headers,\n      body,\n    });\n\n    return results;\n  } catch (error) {\n    throw new CodedError('ERR_APP_AUTH_REVOKE_FAILED', error.message);\n  }\n}\n\nexport const { OAuthRedirect, URLSchemes } = ExpoAppAuth;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}